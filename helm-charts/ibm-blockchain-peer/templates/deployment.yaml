{{- range $i, $node := .Values.target.org.nodes }} 
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ $node.service.name }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: {{ $.Values.target.org.name | lower }}{{ $node.service.shortName }}
    spec:
      containers:
      - name: peer
        image: "{{ $.Values.images.peers.repository}}:{{ $.Values.images.peers.tag}}"
        imagePullPolicy: {{ $.Values.images.peers.pullPolicy }}
        command: ["sh", "-c", "peer node start"]
        envFrom:
        - configMapRef:
            name: {{ $node.service.name }}      
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /peer-config
          name: peer-config 
        - mountPath: /host/var/run/docker.sock
          name: dockersocket
      - name: cli-{{ $i }}
        image: "{{ $.Values.images.tools.repository }}:{{ $.Values.images.tools.tag }}"
        imagePullPolicy: {{$.Values.images.tools.pullPolicy}}
        command: ["bash", "-c", "sleep 100000"]
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /peer-config
          name: peer-config 
{{- if eq $i 0 }}
      initContainers:
      - name: init-peer
        image: "{{ $.Values.images.tools.repository }}:{{ $.Values.images.tools.tag }}"
        imagePullPolicy: {{ $.Values.images.tools.pullPolicy }}
        command: ["sh", "-c", "chmod +x /peer-config/setup.sh && /peer-config/setup.sh"]
        volumeMounts:
        - mountPath: /data
          name: data    
        - mountPath: /peer-config
          name: peer-config 
{{- end }} 
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: peer-pvc-{{ $.Release.Name | lower }}
      - name: peer-config
        configMap:
          name: peer-config-{{ $.Release.Name | lower }}
      - name: dockersocket
        hostPath:
          path: /var/run/docker.sock          
{{- end }}        

